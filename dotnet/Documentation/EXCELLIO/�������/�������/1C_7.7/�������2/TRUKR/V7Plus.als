{"Shell",
{"Folder","AST","Внешняя компонента V7Plus","",
{"Folder","AST","Электронная почта (объект V7Mail)","",
{"Folder","AST","Атрибуты","",
{"Item","AST","Заголовок","Subject","Заголовок","Subject","@Синтаксис
Заголовок
@Назначение
Заголовок сообщения (строковое выражение)

Атрибут доступен для объекта типа V7Mail"},
{"Item","AST","Текст","Text","Текст","Text","@Синтаксис
Текст
@Назначение
Текст сообщения (строковое выражение)

Атрибут доступен для объекта типа V7Mail"},
{"Item","AST","ДатаОтправки","DatеSend","ДатаОтправки","DatеSend","@Синтаксис
ДатаОтправки
@Назначение
Дата отправки (строка) письма в формате ''ГГГГ/ММ/ДД ЧЧ:ММ'', где ГГГГ - год, ММ - месяц, ДД - день; ЧЧ - час, ММ - минута отправки письма.

Атрибут доступен для объекта типа V7Mail"}},
{"Folder","AST","Методы","",
{"Item","AST","Подключиться","Logon","Подключиться();","Logon();","@Синтаксис
1. Подключиться()
2. Подключиться(''1C'', <ИмяАбонента>, <Пароль>, <КаталогПочтовогоУзла>)
3. Подключиться(''MAPI'', <КонфигурацияПодключения>, <Пароль>)
@Назначение
1. Метод Подключиться инициализирует сеанс работы с почтой в соответствии с выбранным на закладке свойств компоненты типом почты и параметрами подключения.
2. Метод Подключиться инициализирует сеанс работы с ''1С:Электронная Почта'' с выбранными параметрами подключения.
3. Метод Подключиться инициализирует сеанс работы с почтой MAPI с соответствующими параметрами подключения и паролем.

<ИмяАбонента>(строковое выражение) - почтовое имя абонента в системе ''1С:Электронная Почта''
<Пароль> (строковое выражение) - пароль
<КаталогПочтовогоУзла> (строковое выражение) - каталог почтового узла (диск должен быть обязательно подключен)
<КонфигурацияПодключения> (строковое выражение) - название используемой конфигурации подключения.

Метод доступен для объекта типа V7Mail"},
{"Item","AST","Отключиться","Logoff","Отключиться();","LogOff();","@Синтаксис
Отключиться()
@Назначение
Метод Отключиться завершает сеанс работы с почтой инициализированный методом Подключиться

Метод доступен для объекта типа V7Mail"},
{"Item","AST","НовоеСообщение","NewMessage","НовоеСообщение(<?>);","NewMessage(<?>);","@Синтаксис
НовоеСообщение()
@Назначение
Метод НовоеСообщение инициализирует создание нового сообщения. После инициализации происходит заполнение его реквизитов с последующим вызовом метода Послать

Метод доступен для объекта типа V7Mail"},
{"Item","AST","ДобавитьАдрес","AddAddress","ДобавитьАдрес(<?>);","AddAddress(<?>);","@Синтаксис
ДобавитьАдрес(<Адрес>)
@Назначение
<Адрес> (строковое выражение) - почтовый адрес.
Метод ДобавитьАдрес добавляет адрес в список адресов получателей данного сообщения, созданного методом НовоеСообщение. Адрес формируется в соответствии с выбранным типом ЭП

Метод доступен для объекта типа V7Mail"},
{"Item","AST","ДобавитьФайл","AddFile","ДобавитьФайл(<?>);","AddFile(<?>);","@Синтаксис
ДобавитьФайл(<ИмяФайла>)
@Назначение
<ИмяФайла>(строковое выражение) - значение полного пути к добавляемому файлу
Метод ДобавитьФайл позволяет добавить имя нового файла в список присоединенных файлов сообщения, созданного методом НовоеСообщение. 
Файл должен существовать. В случае ''1C:Электронная Почта'' диск, на котором находится файл (диск должен быть обязательно подключен).

Метод доступен для объекта типа V7Mail"},
{"Item","AST","Послать","Send","Послать(<?>);","Send(<?>);","@Синтаксис
Послать(<Просмотр>)
@Назначение
<Просмотр> - числовое значение: 0 - не отображать окно редактирования сообщения перед отправкой (значение по умолчанию); 1 - отображает окно редактирования и позволяет просмотреть и отредактировать сообщение перед отправкой (только в случае работы с клиентом MAPI)
Метод Послать позволяет отправить сообщение, созданного методом НовоеСообщение. У посылаемого сообщения обязательно должен быть задан хотя бы один адресат

Метод доступен для объекта типа V7Mail"},
{"Item","AST","ВыбратьСообщения","SelectMеssages","ВыбратьСообщения();","SelectMеssages();","@Синтаксис
ВыбратьСообщения()
@Назначение
Метод ВыбратьСообщения инициализирует процесс получения сообщений с помощью метода ПолучитьСообщение.
Возвращаемое значение: нет

Метод доступен для объекта типа V7Mail"},
{"Item","AST","ПолучитьСообщение","ReceiveMessage","ПолучитьСообщение();","ReceiveMessage();","@Синтаксис
ПолучитьСообщение()
@Назначение
Метод ПолучитьСообщение выбирает следующее сообщение из выборки, открытой с помощью метода ВыбратьСообщения. Данный метод используется для организации цикла по сообщениям. После получения сообщения доступны для чтения адрес отправителя и заголовок сообщения. Содержимое сообщения (текст и присоединенные файлы) будет доступно после выполнения метода ПрочитатьСообщение.
Возвращаемое значение:
Числовое значение: 1 - сообщение получено успешно; 0 - сообщений больше нет.

Метод доступен для объекта типа V7Mail"},
{"Item","AST","ПрочитатьСообщение","ReadMessage","ПрочитатьСообщение(<?>);","ReadMessage(<?>);","@Синтаксис
ПрочитатьСообщение(<Флаг>)
@Назначение
<Флаг> Числовое значение: 0 - не помечать как прочитанное; 	1 - помечать как прочитанное (значение по умолчанию).
Метод ПрочитатьСообщение позволяет получить содержимое сообщения (текст и присоединенные файлы), полученного с помощью метода ПолучитьСообщение. Текст сообщения хранится в атрибуте Текст, а полные пути к присоединенным файлам можно получить с помощью метода ПолучитьФайл.
Файлы копируются во временную директорию и удаляются при переходе на следующее сообщение (метод ПолучитьСообщение)
Параметр <Флаг> определяет состояние сообщения после прочтения: 
0 - сообщение не помечается как прочитанное и может быть повторно получено и прочитано;
1 - сообщение помечается как прочитанное и не попадает в последующие выборки.


Метод доступен для объекта типа V7Mail"},
{"Item","AST","АдресОтправителя","SenderAddress","АдресОтправителя();","SenderAddress();","@Синтаксис
АдресОтправителя()
@Назначение
Метод АдресОтправителя позволяет получить адрес, с которого было отправлено сообщение. Для того, чтобы получить адреса отправителя надо сначала получить сообщение с помощью метода ПолучитьСообщение.
Возвращаемое значение:
<Адрес> (строковое выражение) - значение адреса отправителя сообщения.

Метод доступен для объекта типа V7Mail"},
{"Item","AST","ПолучитьФайл","GetFile","ПолучитьФайл(<?>,);","GetFile(<?>,);","@Синтаксис
ПолучитьФайл(<ИмяФайла>,<Каталог>)
@Назначение
<ИмяФайла> (строковое выражение) - имя файла
<Каталог> (строковое выражение) - каталог (Disk:\Path\)
Метод ПолучитьФайл получить имя и каталог следующего присоединенного файла сообщения, прочитанного с помощью метода ПрочитатьСообщение. Данный метод используется для организации цикла по присоединенным файлам сообщения. Если файл в дальнейшем планируется использовать, то его необходимо переименовать или скопировать в другое место. При получении следующего сообщения все присоединенные файлы данного сообщения будут удалены.
Возвращаемое значение:
Числовое значение:  1 - получено успешно; 0 - файлов больше нет.

Метод доступен для объекта типа V7Mail"},
{"Item","AST","УдалитьСообщение","DeleteMessage","УдалитьСообщение();","DeleteMessage();","@Синтаксис
УдалитьСообщение()
@Назначение
Метод УдалитьСообщение удаляет текущее сообщение, полученное с помощью метода ПолучитьСообщение. (и, возможно, прочитанное с помощью метода ПрочитатьСообщение).

Метод доступен для объекта типа V7Mail"}}},
{"Folder","AST","Доступ к данным по протоколу HTTP (объект V7HttpReader)","",
{"Folder","AST","Атрибуты","",
{"Item","AST","КоличествоПопытокАвторизации","AuthAttemptsNum","КоличествоПопытокАвторизации","AuthAttemptsNum","@Синтаксис
КоличествоПопытокАвторизации
@Назначение
При помощи атрибута можно задавать значение числа попыток авторизации. Если данный атрибут установлен в ноль, вывод диалога задания параметров соединения запрещен, т.е. все параметры соединения должны быть установлены методами УстановитьПараметрыПрокси и Пользователь. 

Пример:
Соединение.КоличествоПопытокАвторизации = 0;"},
{"Item","AST","СтрокаСостоянияОтвета","ResponseStatusLine","СтрокаСостоянияОтвета","ResponseStatusLine","@Синтаксис
СтрокаСостоянияОтвета
@Назначение
По окончании обмена с сервером данное свойство содержит возвращенную сервером строку статуса, которая состоит их 3-х частей : использовавшийся при обмене протокол, код статуса, вербальное описание кода статуса.
Примеры строки состояния ответа:
HTTP/1.1 200 OK
HTTP/1.1 404 Object Not Found 

Пример:
см. пример из описания метода Получить."}},
{"Folder","AST","Методы","",
{"Item","AST","Пользователь","User","Пользователь(<?>,);","User(<?>,);","@Синтаксис
Пользователь(<Имя>,<Пароль>)
@Назначение
Применение этого метода позволяет подключаться к защищенным паролем Web-серверам автоматически, без ввода пароля вручную.
Возвращаемое значение:
Нет.
Параметры: 
<Имя> - имя пользователя, которое будет использоваться для доступа к Web-серверу
<Пароль> - пароль пользователя, который будет использоваться для доступа к Web-серверу

Пример:
// Установка пароля
Соединение.Пользователь(''Guest'', ''Password'');"},
    {"Item","AST","УстановитьПараметрыПрокси","SetProxyParams",
"УстановитьПараметрыПрокси(<?>,);",
"SetProxyParams(<?>,);",
"@Синтаксис
УстановитьПараметрыПрокси(ПроксиИмя, ПроксиПароль)
@Назначение
Применение этого метода позволяет осуществлять аутентификацию прокси-сервером автоматически, без ввода параметров вручную.
Возвращаемое значение:
Нет.
Параметры: 
ПроксиИмя - Имя учетной записи прокси-сервера (строка)
ПроксиПароль - Пароль доступа  (строка)

Пример:
// Установка параметров аутентификации прокси-сервером
Соединение.УстановитьПараметрыПрокси(''Alex'', ''L635'');"
    },
{"Item","AST","ПолучитьКакФайл","ReceiveAsFile","ПолучитьКакФайл(<?>,);","ReceiveAsFile(<?>,);","@Синтаксис
ПолучитьКакФайл(<URL>, <ИмяФайла>)
@Назначение
URL записывается в форме протокол://хост/путь. Протокол может быть не указан или указан, как http://. В обоих случаях будет использован протокол передачи гипертекста (HTTP). Хост определяет имя Web-сервера, на котором расположен требуемый ресурс, а путь указывает на расположение ресурса на сервере.
Если в процессе обработки возникает ошибка, генерируется исключительная ситуация.
Возвращаемое значение:
Нет
Параметры: 
<URL> - строковая переменная, Uniform Resource Locator, адрес ресурса в Internet.
<ИмяФайла> - строковое выражение, имя файла, в который следует поместить содержимое Internet-ресурса

Пример:
//
Попытка 
    HTTPСоединение.ПолучитьКакФайл(
    ''http://www.ResourceServer.ru/res/price.xml'',
    ''c:\dnld\price.xml'');
Исключение
    Сообщить(HTTPСоединение.СтрокаСостоянияОтвета) ;
    . . . . . . 
КонецПопытки ;"},
{"Item","AST","ПолучитьКакСтроку","ReceiveAsFile","ПолучитьКакСтроку(<?>,);","ReceiveAsString(<?>,);","@Синтаксис
ПолучитьКакСтроку(<URL>, <СтрокаДляПриема>)
@Назначение
URL записывается в форме протокол://хост/путь. Протокол может быть не указан или указан, как http://. В обоих случаях будет использован протокол передачи гипертекста (HTTP). Хост определяет имя Web-сервера, на котором расположен требуемый ресурс, а путь указывает на расположение ресурса на сервере.
Если в процессе обработки возникает ошибка, генерируется исключительная ситуация
Возвращаемое значение:
Нет.
Параметры: 
<URL> - строковая переменная, Uniform Resource Locator, адрес ресурса в Internet.
<СтрокаДляПриема> - строковая переменная, в которую следует поместить содержимое Internet-ресурса

Пример:
1С_ПрайсЛист = '''';
Адрес = ''http://www.ResourceServer.ru/resources/price.txt'';
Соединение.ПолучитьКакСтроку(Адрес, ПрайсЛист);"},
{"Item","AST","Получить","Receive","Получить(<?>,<?>,<?>);","Receive(<?>,<?>,<?>);","@Синтаксис
Получить(<URL>,<Приемник>,<ТипПриемника>)
@Назначение
URL записывается в форме протокол://хост/путь. Протокол может быть не указан или указан, как http://. В обоих случаях будет использован протокол передачи гипертекста (HTTP). Хост определяет имя Web-сервера, на котором расположен требуемый ресурс, а путь указывает на расположение ресурса на сервере.
Если в процессе обработки возникает ошибка, генерируется исключительная ситуация.
Возвращаемое значение:
Нет
Параметры: 
<URL> - строковая переменная, Uniform Resource Locator, адрес ресурса в Internet.
<Приемник> - переменная, в которую следует поместить содержимое Internet-ресурса.
<ТипПриемника> - числовое выражение, определяет способ сохранения содержимого Internet-ресурса. Допустимые значения приведены в таблице:
ТипПриемника - Способ сохранения
1 - Переменная Приемник должна иметь тип строки, ее содержимое интерпретируется как путь к файлу, в который следует записать содержимое ответа сервера.
2 - Ответ сервера запоминается в переменной Приемник в виде строки.
3 - Переменная Приемник должна иметь тип объекта OLE-Automation, имплементирующего интерфейс IStream. Cодержимое ответа будет передано этому интерфейсу, способ обработки этих данных будет зависеть от реализации OLE-объекта.

Пример:
//
Попытка 
    HTTPСоединение.Получить( ''http://www.ResourceServer.ru/res/price.xml'',
''c:\dnld\price.xml'', 1);
Исключение
    Сообщить(HTTPСоединение.СтрокаСостоянияОтвета) ;
    . . . . . . 
КонецПопытки ;"},
{"Item","AST","ПолучитьКакОбъект","ReceiveAsObject","ПолучитьКакОбъект(<?>,);","ReceiveAsObject(<?>,);","@Синтаксис
ПолучитьКакОбъект(URL, Объект)
@Назначение
URL записывается в форме протокол://хост/путь. Протокол может быть не указан или указан, как http://. В обоих случаях будет использован протокол передачи гипертекста (HTTP). Хост определяет имя Web-сервера, на котором расположен требуемый ресурс, а путь указывает на расположение ресурса на сервере.
Объектом может быть любой OLE-объект, имплементирующий интерфейс IStream.
Если в процессе обработки возникает ошибка, генерируется исключительная ситуация.
Возвращаемое значение:
Нет.
Параметры: 
<URL> - строковая переменная, Uniform Resource Locator, адрес ресурса в Internet.
<Объект> - объект, который следует загрузить из содержимого Internet-ресурса.

Пример:
HTTPСоединение.ПолучитьКакОбъект(
''http://www.ResourceServer.ru/res/price.xml'', XMLДокумент);"},
{"Item","AST","ОтправитьДляОбработки","SendAndProcess","ОтправитьДляОбработки(<?>, , , , );","SendAndProcess(<?>, , , , );","@Синтаксис
ОтправитьДляОбработки(<URL>,<Источник>,<ТипИсточника>, <Приемник>,<ТипПриемника>)
@Назначение
URL записывается в форме протокол://хост/путь. Протокол может быть не указан или указан, как http://. В обоих случаях будет использован протокол передачи гипертекста (HTTP). Хост определяет имя Web-сервера, на котором расположен требуемый ресурс, а путь указывает на расположение ресурса на сервере.
Если в процессе обработки возникает ошибка, генерируется исключительная ситуация.
Возвращаемое значение:
Нет.
Параметры: 
<URL> - строковая переменная, Uniform Resource Locator, адрес ресурса в Internet.
<Источник> - переменная, содержимое которой следует передать для обработки Internet-ресурсу.
<ТипИсточника> - числовое выражение, определяет тип переменной Источник и, соответственно, способ передачи ее содержимого Internet-ресурсу. Допустимые значения:	
1 - переменная Источник должна иметь тип строки, ее содержимое интерпретируется как путь к файлу, содержимое которого следует присоединить к запросу
2 - переменная Источник должна иметь тип строки, к запросу будет присоединено ее содержимое.
3 - переменная Источник должна иметь тип объекта OLE-Automation, имплементирующего интерфейс IStream. К запросу будут присоединены данные, полученные через этот интерфейс.
<Приемник> - переменная, в которую следует поместить содержимое Internet-ресурса.
<ТипПриемника> - числовое выражение, определяет способ сохранения содержимого Internet-ресурса. Допустимые значения:
1 - переменная Приемник должна иметь тип строки, ее содержимое интерпретируется как путь к файлу, в который следует записать содержимое ответа сервера
2 - ответ сервера запоминается в переменной Приемник в виде строки.
3 - переменная Приемник должна иметь тип объекта OLE-Automation, имплементирующего интерфейс IStream. Cодержимое ответа будет передано этому интерфейсу, способ обработки этих данных будет зависеть от реализации OLE-объекта.
	 
Пример:
HTTPСоединение.ОтправитьДляОбработки(
''http://www.ResourceServer.ru/res/Active_page.asp'',
XMLДокументОтпр, 3, XMLДокументПолуч, 3);"},
{"Item","AST","УдалитьЗаголовкиЗапроса","removeRequestHeaders","УдалитьЗаголовкиЗапроса();","removeRequestHeaders();","@Синтаксис
УдалитьЗаголовкиЗапроса()
@Назначение
Объект компоненты сохраняет состав и содержимое заголовков запроса между обращениями к ресурсам, поэтому до начала формирования запроса, требующего иного состава или содержания заголовков, чем предыдущий, требуется вызвать данный метод.
Возвращаемое значение:
Нет.
Параметры:
Нет.

Пример:
HTTPСоединение.УдалитьЗаголовкиЗапроса();"},
{"Item","AST","УстановитьЗаголовокЗапроса","setRequestHeader","УстановитьЗаголовокЗапроса(<?>, );","setRequestHeader(<?>, );","@Синтаксис
УстановитьЗаголовокЗапроса(<ИмяЗаголовка>,<Содержимое>)
@Назначение
Объект компоненты сохраняет состав и содержимое заголовков запроса между обращениями к ресурсам, поэтому до начала формирования запроса, требующего иного состава или содержания заголовков, чем предыдущий, требуется вызвать данный метод.
Возвращаемое значение:
Нет.
Параметры: 
<ИмяЗаголовка> - строковое выражение, наименование устанавливаемого заголовка
<Содержимое> - строковое выражение, устанавливаемое значение заголовка

Пример:
HTTPСоединение.УстановитьЗаголовокЗапроса(
''MyAction'',''Upload'');"},
{"Item","AST","ПолучитьЗаголовокОтвета","getResponseHeader","ПолучитьЗаголовокОтвета(<?>, );","getResponseHeader(<?>, );","@Синтаксис
ПолучитьЗаголовокОтвета(<НомерЗаголовка>)
@Назначение
Возвращает наименование заголовка ответа по номеру.
Возвращаемое значение:
Строка, наименование заголовка ответа.
Параметры: 
<НомерЗаголовка	> - число, порядковый номер заголовка в ответе сервера. Нумерация начинается с 1.

Пример:
Заголовок = HTTPСоединение.ПолучитьЗаголовокОтвета(1);"},
{"Item","AST","ПолучитьСодержаниеЗаголовкаОтвета","getResponseContents","ПолучитьСодержаниеЗаголовкаОтвета(<?>);","getResponseContents(<?>);","@Синтаксис
ПолучитьСодержаниеЗаголовкаОтвета(<Заголовок>)
@Назначение
Возвращает содержание заголовка.
Возвращаемое значение:
Строка, содержание заголовка ответа.
Параметры: 
<Заголовок> - строка, наименование заголовка ответа, или число, порядковый номер заголовка в ответе сервера. Нумерация начинается с 1.

Пример:
Действие =
HTTPСоединение.ПолучитьСодержаниеЗаголовокаОтвета(''SrvAction'') ;"},
{"Item","AST","КоличествоЗаголовковОтвета","getResponseHeadersNumber","КоличествоЗаголовковОтвета();","getResponseHeadersNumber();","@Синтаксис
 КоличествоЗаголовковОтвета()
@Назначение
Возвращает содержание заголовка.
Возвращаемое значение:
Число, количество заголовков в ответе сервера.
Параметры: 
нет.

Пример:
Для Сч = 1 По HTTPСоединение.КоличествоЗаголовковОтвета() Цикл
    Заголовок  = HTTPСоединение.ПолучитьЗаголовокОтвета(Сч);
    Содержимое =
HTTPСоединение.ПолучитьСодержимоеЗаголовкаОтвета(Заголовок);
    Сообщить(Заголовок + '' = '' + Содержимое;
КонецЦикла;"}}},
{"Folder","AST","Системная информация (объект V7SysInfo)","",
{"Folder","AST","Атрибуты","",
{"Item","AST","ВерсияОС","OSVersion","ВерсияОС","OSVersion","@Синтаксис
ВерсияОС
@Назначение
Атрибут ВерсияОС содержит наименование версии операционной системы (строковое выражение).

Атрибут доступен для объекта типа V7SysInfo"},
{"Item","AST","Процессор","Processor","Процессор","Processor","@Синтаксис
Процессор
@Назначение
Атрибут Процессор (строковое выражение) содержит наименование тип процессора, установленного на компьютере.

Атрибут доступен для объекта типа V7SysInfo"},
{"Item","AST","ОперативнаяПамять","Memory","ОперативнаяПамять","Memory","@Синтаксис
ОперативнаяПамять
@Назначение
Атрибут ОперативнаяПамять (число) содержит информацию об объеме оперативной памяти, установленный на компьютере, в мегабайтах.

Атрибут доступен для объекта типа V7SysInfo"},
{"Item","AST","РелизПрограммы","ProgrammRelease","РелизПрограммы","ProgrammRelease","@Синтаксис
РелизПрограммы
@Назначение
Атрибут РелизПрограммы (строковое выражение) содержит информацию о номере релиза 1С:Предприятия.

Атрибут доступен для объекта типа V7SysInfo"},
{"Item","AST","ИмяФайлаПрограммы","ProgrammFileName","ИмяФайлаПрограммы","ProgrammFileName","@Синтаксис
ИмяФайлаПрограммы
@Назначение
Атрибут ИмяФайлаПрограммы (строковое выражение) содержит информацию об имени файла программы (1С:Предприятия).

Атрибут доступен для объекта типа V7SysInfo"}},
{"Folder","AST","Методы","",
{"Item","AST","ПроверитьИмяФайла","CheckFileName","ПроверитьИмяФайла(<?>);","CheckFileName(<?>);","@Синтаксис
ПроверитьИмяФайла(<Адрес>)
@Назначение
<Адрес> (строковое значение) - адрес ключевого слова.
Метод ПроверитьИмяФайла предназначен для получения ключевого слова по указанному адресу на диске ИТС.

Метод доступен для объекта типа V7SysInfo"},
{"Item","AST","СоздатьGUID","CreateGUID","СоздатьGUID();","CreateGUID();","@Синтаксис
СоздатьGUID()
@Назначение
Метод СоздатьGUID генерирует новый GUID (Globally Unique Identifier).
Возвращаемое значение:
Строковое выражение - новый GUID.
Параметры:
нет.

Пример:
Инфо = СоздатьОбъект(''AddIn.V7SysInfo'');
ГлобальноУникальныйИдентификатор = Инфо.СоздатьGUID();"}}},
{"Folder","AST","Анализатор XML-документов","XML Parser",
{"Folder","AST","Анализатор","",
{"Folder","AST","Атрибуты","",
{"Item","AST","ВерсияАнализатора","ParserVersion","ВерсияАнализатора","ParserVersion","@Синтаксис
ВерсияАнализатора
@Назначение
Возвращает версию компоненты в виде строки, только для чтения.
Пример:
Версия = Анализатор. ВерсияАнализатора ;"},
{"Item","AST","ВерсияБазовогоАнализатора","BaseParserVersion","ВерсияБазовогоАнализатора","BaseParserVersion","@Синтаксис
ВерсияБазовогоАнализатора
@Назначение
Возвращает в виде строки версию базового анализатора - Microsoftв XML Parser.
Пример:
Версия = Анализатор. ВерсияАнализатора ;"}},
{"Folder","AST","Методы","",
{"Item","AST","СоздатьДокумент","CreateDocument","СоздатьДокумент()","CreateDocument()","@Синтаксис:
СоздатьДокумент()
@Назначение
Создает новый объект узла XML документа
Возвращаемое значение:
Узел документа
Параметры: 
нет

Пример:
Документ = Анализатор.СоздатьДокумент() ;"},
{"Item","AST","СоздатьКоллекциюСхем","CreateSchemasCollection","СоздатьКоллекциюСхем()","CreateSchemasCollection()","@Синтаксис:
СоздатьКоллециюСхем()
@Назначение
Создает новый объект коллекции схем
Возвращаемое значение:
Объект коллекции схем
Параметры: 
	нет
	
Пример:
КоллекцияСхемДляПроверки = Анализатор.СоздатьКоллециюСхем() ;"},
{"Item","","СоздатьПоследовательноСчитываемыйДокумент","CreateForwardReadOnlyDocument","СоздатьПоследовательноСчитываемыйДокумент(<?>)","","@Синтаксис:
СоздатьПоследовательноСчитываемыйДокумент()
@Назначение:
Создает новый объект - последовательно считываемый документ.
@Возвращаемое значение:
(OLE-объект)  Узел документа
@Замечание:
Для работы с объектом необходимо применить один из методов:
СвязатьСФайлом()
СвязатьСоСтрокой()
СвязатьСОбъектом()
@Пример:
XMLАнализатор = СоздатьОбъект(""AddIn.XMLParser"");
Док = XMLАнализатор.СоздатьПоследовательноСчитываемыйДокумент();
Док.СвязатьСФайлом(ФормИмяФайлаДанных);"},
{"Item","","СоздатьПоследовательноЗаписываемыйДокумент","CreateForwardWriteOnlyDocument","СоздатьПоследовательноЗаписываемыйДокумент(<?>)","","@Синтаксис:
СоздатьПоследовательноЗаписываемыйДокумент()
@Назначение:
Создает новый объект - последовательно записываемый документ.
@Возвращаемое значение:
(OLE-объект)  Узел документа
@Пример:
XMLАнализатор = СоздатьОбъект(""AddIn.XMLParser"");
Док = XMLАнализатор.СоздатьПоследовательноЗаписываемыйДокумент();
Док.ИмяФайла = ФормИмяФайлаДанных;
Док.ОткрытьЭлемент(""ФайлОбмена"");
..................................................................
Док.ЗакрытьЭлемент();
Док.Сбросить();
Док.Завершить();"}}},
{"Folder","AST","Базовый объект - узел","",
{"Folder","AST","Атрибуты","",
{"Item","AST","Тип","nodeType","Тип","nodeType","@Синтаксис
Тип
@Назначение
Число, соответствующее типу узла в DOM (Document Object Model) :
Тип узла                       Значение свойства
--------------------------------------------------------------------------
Элемент	                                                 1
Атрибут	                                                 2
Текст	                                                 3
Секция данных	                                 4
Ссылка на компонент	                 5
Компонент	                                 6
Инструкция обработки                          7
Комментарий                                          8
Документ                                                9
Определение типа документа (DTD)	 10
Фрагмент документа	                 11
Описание                                                12

Пример:
Если Узел.Тип = 1 Тогда
    // Этот узел - элемент
    . . . . . . 
КонецЕсли ;"},
{"Item","AST","ТипСтрока","nodeTypeString","ТипСтрока","nodeTypeString","@Синтаксис
ТипСтрока
@Назначение
Строка, соответствующее типу узла в DOM (Document Object Model) :
Тип узла                       Значение свойства
--------------------------------------------------------------------------
Атрибут                                                    attribute
Секция данных                                        cdatasection
Комментарий                                          comment
Документ                                                 document
Фрагмент документа                             documentfragment
Определение типа документа (DTD)    documenttype
Элемент                                                   element
Компонент                                               entity
Ссылка на компонент                            entityreference
Описание                                                 notation
Инструкция обработки	processinginstruction
Текст	text

Пример:
Сообщить(''Тип узла - '' + Узел.ТипСтрока) ;"},
{"Item","AST","ПолноеНаименование","nodeName","ПолноеНаименование","nodeName","@Синтаксис
ПолноеНаименование
@Назначение
Значение зависит от типа узла. Наибольший интерес представляет для элементов и атрибутов, для которых возвращает наименование полностью, т.е. префикс и наименование, разделенные двоеточием.

Пример:
Сообщить(''Полное наименование узла - '' + Узел.ПолноеНаименование) ;"},
{"Item","AST","Наименование","baseName","Наименование","baseName","@Синтаксис
Наименование
@Назначение
Значение зависит от типа узла. Наибольший интерес представляет для элементов и атрибутов, для которых возвращает только наименование, без префикса.

Пример:
Сообщить(''Наименование узла - '' + Узел.Наименование);"},
{"Item","AST","Префикс","prefix","Префикс","prefix","@Синтаксис
Префикс
@Назначение
Значение зависит от типа узла. Наибольший интерес представляет для элементов и атрибутов, для которых возвращает только префикс.

Пример:
Сообщить(''Префикс узла - '' + Узел.Префикс);"},
{"Item","AST","Родитель","parentNode","Родитель","parentNode","@Синтаксис
Родитель
@Назначение
Узел, которому принадлежит данный узел. Отметим, что узлы атрибутов родителя не имеют и данное свойство для них всегда является пустым значением.

Пример:
ЭлПодразделение = ЭлСотрудник.Родитель;"},
{"Item","AST","ДокументВладелец","ownerDocument","ДокументВладелец","ownerDocument","@Синтаксис
ДокументВладелец
@Назначение
Узел документа, которому принадлежит данный узел.

Пример:
УзелДокумента = Узел.ДокументВладелец;"},
{"Item","AST","ТипДанных","dataType","ТипДанных","dataType","@Синтаксис
ТипДанных
@Назначение
Строка, соответствующая типу данных, которое имеет значение узла. Влияет на допустимые значения, которые могут быть присвоены данному узлу, способ их хранения и, для атрибутов, тип возвращаемого значения при запросе свойства Значение.

Пример:
Если Атрибут.Наименование = ''Дата'' Тогда
    Атрибут.ТипДанных = ''date'' ;
    Атрибут.Значение = ТекущаяДата() ;
КонецЕсли ;"},
{"Item","AST","Текст","text","Текст","text","@Синтаксис
Текст
@Назначение
Строка соответствующая содержимому узла вместе со всеми принадлежащими ему подчиненными узлами. Заметим, что присвоение этого свойства полностью реорганизует всю структуру подчиненных узлов.

Пример:
Сообщить(''Текст узла - '' + Узел.Текст);"},
{"Item","AST","Значение","nodeValue","Значение","nodeValue","@Синтаксис
Значение
@Назначение
Строка, соответствующая содержимому узла.

Пример:
Сообщить(''Значение узла - '' + Узел.Значение);"},
{"Item","AST","ПредставлениеXML","xml","ПредставлениеXML","xml","@Синтаксис
ПредставлениеXML
@Назначение
Строка, представление данного узла со всеми подчиненными узлами в формате XML документа.

Пример:
Сообщить(''Представление узла - '' + Узел.ПредставлениеXML);"}},
{"Folder","AST","Методы","",
{"Item","AST","КоличествоПодчиненных","NumberChilds","КоличествоПодчиненных()","NumberChilds()","@Синтаксис:
КоличествоПодчиненных()
@Назначение
Метод возвращает количество узлов, подчиненных данному. В это количество не включается количество узлов-атрибутов
Возвращаемое значение:
Число, количество узлов, подчиненных данному.
Параметры: 
нет

Пример:
см. пример для метода ПолучитьПодчиненныйПоНомеру"},
{"Item","AST","ПолучитьПодчиненныйПоНомеру","GetChildByNum","ПолучитьПодчиненныйПоНомеру(<?>)","GetChildByNum(<?>)","@Синтаксис:
ПолучитьПодчиненныйПоНомеру(<НомерУзла>)
@Назначение
В совокупности с КоличествоПодчиненных данный метод используется для обхода узлов, подчиненных данному узлу. Порядок обхода совпадает с расположением узлов в документе
Возвращаемое значение:
объект узла документа определенного типа
Параметры: 
<НомерУзла> - числовое выражение, содержащее номер требуемого узла. Нумерация узлов начинается с нуля

Пример:
Для Сч = 0 По Элемент.КоличествоПодчиненных()-1 Цикл
     ПодчУзел = Элемент.ПолучитьПодчиненныйПоНомеру(Сч) ;
     . . . . . . . 
КонецЦикла ;"},
{"Item","AST","ДобавитьПодчиненный","appendChild","ДобавитьПодчиненный(<?>,)","appendChild(<?>,)","@Синтаксис:
ДобавитьПодчиненный(<НовУзел>, <ВставитьПеред>)
@Назначение
Метод используется для вставки нового узла, созданного с помощью соответствующих методов объекта документа, в список подчиненных данному узлу
Возвращаемое значение:
нет
Параметры: 
<НовУзел> - Объект нового узла
<ВставитьПеред> - Необязательный параметр, тип - узел. Если параметр указан, новый узел будет вставлен перед ним, в противном случае новый узел будет вставлен последним.

Пример:
ИнструкцияОбработки = Документ.СоздатьУзел(7, ''xml'') ; 
ИнструкцияОбработки.Данные = ''version='1.0''' ;
Документ.ДобавитьПодчиненный(ИнструкцияОбработки, Документ.ЭлементДокумента) ;"},
{"Item","AST","УдалитьПодчиненный","removeChild","УдалитьПодчиненный(<?>)","removeChild(<?>)","@Синтаксис
УдалитьПодчиненный(<УдаляемыйУзел>)
@Назначение
Метод удаляет указанный узел из списка узлов, подчиненных данному.
Возвращаемое значение:
нет
Параметры:
<УдаляемыйУзел> - Объект узла, удаляемого из списка подчиненных данному узлу

Пример:
ПервыйПодчиненный = Документ.УзелДокумента.ПолучитьПоНомеру(0) ;
Документ.УзелДокумента.УдалитьПодчиненный(ПервыйПодчиненный);"},
{"Item","AST","ВыбратьУзлы","selectNodes","ВыбратьУзлы(<?>)","selectNodes(<?>)","@Синтаксис:
ВыбратьУзлы(<КритерийОтбора>)
@Назначение
Метод возвращает объект коллекции узлов, содержащий узлы элементов или атрибутов, которые удовлетворяли критерию отбора, сформулированного в параметре КритерийОтбора. Запрос формулируется на языке запросов XSL (XSL Pattern Language).
Возвращаемое значение:
Объект коллекции узлов, содержащий узлы элементов или атрибутов, которые удовлетворяли критерию отбора, сформулированного в параметре КритерийОтбора.
Параметры:
<КритерийОтбора> - строковое выражение, содержащее критерии отбора узлов в создаваемую коллекцию.

Пример:
// отбираем все элементы Товар
Выборка = Документ.УзелДокумента.ВыбратьУзлы(''Товар'') ;"},
{"Item","AST","ВыбратьУзел","selectSingleNode","ВыбратьУзел(<?>)","selectSingleNode(<?>)","@Синтаксис:
ВыбратьУзел(<КритерийОтбора>)
@Назначение
Метод возвращает первый узел, элемент или атрибут, который удовлетворял критерию отбора, сформулированного в параметре КритерийОтбора. Запрос формулируется на языке запросов XSL (XSL Pattern Language).
Возвращаемое значение:
Первый узлов, элемент или атрибут, который удовлетворяет критерию отбора, сформулированного в параметре КритерийОтбора
Параметры:
<КритерийОтбора> - строковое выражение, содержащее критерии выбора узла

Пример:
// находим информацию о товарах
Каталог = Документ.УзелДокумента.ВыбратьУзел(''//ИнформацияОТоварах'') ;"},
{"Item","AST","СоздатьПодчиненныйЭлемент","createChildElement","СоздатьПодчиненныйЭлемент(<?>, ,)","createChildElement(<?>, , )","@Синтаксис:
СоздатьПодчиненныйЭлемент(<НаимЭлемента>, <ВставитьПеред>, <ПространствоИмен>)
@Назначение
Предназначением метода является облегчение часто встречающейся операции - процесса создания подчиненного элемента. Если параметр ВставитьПеред не используется, элемент будет вставлен в конец списка.
Возвращаемое значение:
Объект созданного элемента
Параметры:
<НаимЭлемента> - Строковое выражение, содержащее наименование создаваемого элемента.
<ВставитьПеред> - Необязательный параметр. Узел, перед которым следует вставить создаваемый узел элемента.
<ПространствоИмен> - Необязательный параметр, строковое выражение, указывающее пространство имен, в контексте которого создается новый элемент. Если не указан, анализатор предпринимает попытку создать элемент в контексте пространства имен, определенного у стоящих выше по иерархии узлов документа с учетом префикса, указанного в параметре НаимЭлемента.

Пример:
НовыйТовар = Документ.УзелДокумента.СоздатьПодчиненныйЭлемент(''Товар'') ;"},
{"Item","AST","ПреобразоватьВ_ИД","ConvertToID","ПреобразоватьВ_ИД(<?>)","ConvertToID(<?>)","@Синтаксис
ПреобразоватьВ_ИД(<СтрИД>)
@Назначение
Тип атрибута id накладывает определенные ограничения на возможные значения, которые могут быть присвоены этому атрибуту. Данный метод преобразует переданную строку к виду, который допустим для присвоения атрибуту данного типа.
Возвращаемое значение:
Преобразованная строка, допустимая с точки зрения допустимых значений атрибута, имеющего тип id.
Параметры:
<СтрИД> - строковое выражение, преобразуемая строка

Пример:
СтрИД = ЗначениеВСтрокуВнутр(СпрТовары) ;
ЭлТовар.УстановитьАтрибут( ''ИДТовара'',  ЭлТовар. ПреобразоватьВ_ИД(СтрИД)) ;"}}},
{"Folder","AST","Документ","",
{"Folder","AST","Атрибуты","",
{"Item","AST","ЭлементДокумента","documentElement","ЭлементДокумента","documentElement","@Синтаксис
ЭлементДокумента
@Назначение
По стандарту XML документ может иметь ровно один элемент, принадлежащий непосредственно документу, все остальные элементы документа подчинены (возможно, по многоуровневой иерархии) ему. Этот элемент также называют корневым (root).

Пример:
Сообщить(Документ.ЭлементДокумента.Наименование);"},
{"Item","AST","Кодировка","encode","Кодировка","encode","@Синтаксис
Кодировка
@Назначение
Позволяет установить/считать кодировку, в которой сохраняется документ. Задается строкой в соответствии стандартными наименованиями наборов символов для использования в Интерненте. По умолчанию установлена кодировка windows-1251.
Со списком определенных наименований наборов символов можно ознакомиться по адресу http://www.isi.edu/in-notes/iana/assignments/character-sets.

Пример:
Документ.Кодировка = ''UTF-16'';"},
{"Item","AST","ПространстваИмен","namespaces","ПространстваИмен","namespaces","@Синтаксис
ПространстваИмен
@Назначение
Тип - коллекция схем. Предоставляет доступ к использованным в документе пространствам имен.

Пример:
Стр = ''Количество использованных в документе пространств имен - '' ;
Стр = Стр + Документ.ПространстваИмен.КоличествоСхем()) ;
Сообщить(Стр) ;"},
{"Item","AST","Схемы","namespaces","Схемы","namespaces","@Синтаксис
Схемы
@Назначение
Тип - коллекция схем. Позволяет получить доступ к коллекции схем, установленных документу для проверки состоятельности во время загрузки или проверки состоятельности (см. метод Проверить).

Пример:
См. пример в описании метода Проверить."},
{"Item","AST","РазрешатьВнешниеСсылки","resolveExternals","РазрешатьВнешниеСсылки","resolveExternals","@Синтаксис
РазрешатьВнешниеСсылки
@Назначение
Возвращает/устанавливает режим разрешения внешних ссылок при загрузке или проверке состоятельности.

Пример:
См. пример в описании метода Проверить."}},
{"Folder","AST","Методы","",
{"Item","AST","Загрузить","load","Загрузить(<?>)","load(<?>)","@Синтаксис:
Загрузить(<Откуда>)
@Назначение
В случае, если Откуда является строкой, ее содержимое интерпретируется, как путь к файлу, содержащему XML документ. В случае, если Откуда является объектом OLE Automation, документ загружается из потока, представленного интерфейсом IStream или IPersistStream. При возникновении ошибочной ситуации во время загрузки или разбора источника генерируется ошибка исполнения.
Возвращаемое значение:
нет.
Параметры: 
<Откуда> - Может быть строкой или объектом OLE Automation, созданным системной функцией СоздатьОбъект и имплементирующим интерфейс IStream или IPersistStream

Пример:
	Документ.Загрузить(''C:\XMLDocuments\SrcDocument.xml'');"},
{"Item","AST","Записать","save","Записать(<?>)","save(<?>)","@Синтаксис:
Записать(<Куда>)
@Назначение
В случае, если Куда является строкой, ее содержимое интерпретируется, как путь к файлу, где следует сохранить XML документ. В случае, если Куда является COM-объектом, документ выгружается в поток, представленный интерфейсом IStream или IPersistStream. При возникновении ошибочной ситуации во время загрузки или разбора источника генерируется ошибка исполнения.
Возвращаемое значение:
нет.
Параметры: 
<Куда> - Может быть строкой или объектом OLE Automation, созданным системной функцией СоздатьОбъект и имплементирующим интерфейс IStream или IPersistStream

Пример:
Документ.Записать(''C:\XMLDocuments\SrcDocument.xml'');"},
{"Item","AST","ЗагрузитьИзСтроки","loadXML","ЗагрузитьИзСтроки(<?>)","loadXML(<?>)","@Синтаксис:
ЗагрузитьИзСтроки(<СтрокаИсточник>)
@Назначение
При возникновении ошибочной ситуации во время разбора строки генерируется ошибка исполнения.
Возвращаемое значение:
нет.
Параметры: 
<СтрокаИсточник> - строка, содержащая XML документ

Пример:
// создать копию документа
Документ2.ЗагрузитьИзСтроки(Документ1.ПредставлениеXML);"},
{"Item","AST","СоздатьУзел","createNode","СоздатьУзел(<?>,<?>,<?>)","createNode(<?>,<?>,<?>)","@Синтаксис:
СоздатьУзел(<ТипУзла>,<Наименование>,<ПространствоИмен>)
@Назначение
Данный метод позволяет создать новый узел указанного типа. Новый узел после создания еще не включен в документ, т.к. не имеет узла-родителя, т.е. не является частью иерархической структуры документа. Чтобы узел был включен в документ, нужно воспользоваться методом узла ДобавитьПодчиненный.
Возвращаемое значение:
Созданный узел.
Параметры: 
<ТипУзла> - числовое или строковое выражение, определяющее тип создаваемого узла. Значение параметра должно быть равно одному из возможных значений свойств узла Тип или ТипСтрока (см. описания упомянутых свойств узла).
<Наименование> - строковое выражение, для элемента или атрибута - полное наименование, включающее префикс, для инструкции обработки - имя приложения. Для узлов, у которых наименование не имеет смысла, опускается или задается равным пустой строке.
<ПространствоИмен> - необязательный параметр, строковое выражение. Если этот параметр задан, узел создается в контексте указанного пространства имен с учетом префикса, указанного в наименовании. Если в наименовании префикс отсутствует, данное пространство имен интерпретируется как пространство имен по умолчанию.

Пример:
см. пример из описания метода ДобавитьПодчиненный"},
{"Item","AST","НайтиПоИД","nodeFromID","НайтиПоИД(<?>)","nodeFromID(<?>)","@Синтаксис:
НайтиПоИД(<ИД>)
@Назначение
Метод позволяет получить элемент, атрибут с типом id которого имеет значение, совпадающее с заданным при вызове метода.
Возвращаемое значение:
Узел элемента.
Параметры: 
<ИД> - строковое выражение, содержащее искомое поле идентификатора

Пример:
ИскомыйЭлемент = Документ.НайтиПоИД(''А0001'');"},
{"Item","AST","Проверить","validate","Проверить()","validate()","@Синтаксис:
Проверить()
@Назначение
Данный метод осуществляет проверку состоятельности документа. Если документ не состоятелен, генерируется ошибка исполнения.
Возвращаемое значение:
нет.
Параметры: 
нет.

Пример:
Документ. Схемы = СхемыДляПроверки;
Документ.Проверить();"}}},
{"Folder","AST","Элемент","",
{"Folder","AST","Атрибуты","",
{"Item","AST","ИмяТега","tagName","ИмяТега","tagName","@Синтаксис
ИмяТега
@Назначение
Строка - наименование тега элемента.

Пример:
Сообщить(''Тег элемента - '' + Элемент.ИмяТега);"}},
{"Folder","AST","Методы","",
{"Item","AST","УстановитьАтрибут","setAttribute","УстановитьАтрибут(<?>,<?>)","setAttribute(<?>,<?>)","@Синтаксис:
УстановитьАтрибут(<НаименованиеАтрибута>,<Значение>)
@Назначение
Устанавливает значение для указанного атрибута. Если указанный атрибут отсутствует, добавляет его.
Возвращаемое значение:
нет.
Параметры: 
<НаименованиеАтрибута> - строковое выражение, наименование атрибута, значение которого устанавливается
<Значение> - значение, которое следует присвоить атрибуту. Если атрибуту присвоен определенный тип, выполняется попытка преобразования.

Пример:"},
{"Item","AST","ПолучитьАтрибут","getAttribute","ПолучитьАтрибут (<?>)","getAttribute(<?>)","@Синтаксис:
ПолучитьАтрибут(<НаименованиеАтрибута>)
@Назначение
Если атрибуту установлен тип данных, то возвращаемое значение приводится к соответствующему типу, в противном случае возвращается строка.
Возвращаемое значение:
Значение атрибута.
Параметры: 
<НаименованиеАтрибута> - строковое выражение, наименование атрибута, значение которого требуется получить

Пример:
ДатаПриемаНаРаботу = ЭлСотрудник.ПолучитьАтрибут(''ДатаПриема'');"},
{"Item","AST","КоличествоАтрибутов","AttributesNumber","КоличествоАтрибутов()","AttributesNumber()","@Синтаксис:
КоличествоАтрибутов()
@Назначение
Метод возвращает количество атрибутов у данного элемента.
Возвращаемое значение:
Число, количество атрибутов у данного элемента.
Параметры: 
нет.

Пример:
Для Сч = 0 по Элемент.КоличествоАтрибутов()-1 Цикл
    УзелАтрибута = Элемент.ПолучитьУзелАтрибута(Сч) ;
    . . . . . . .
КонецЦикла"},
{"Item","AST","ПолучитьУзелАтрибута","getAttributeNode","ПолучитьУзелАтрибута(<?>)","getAttributeNode(<?>)","@Синтаксис:
ПолучитьУзелАтрибута(<НомерАтрибута>)
	или
ПолучитьУзелАтрибута(<НаименованиеАтрибута>)
@Назначение
Метод позволяет получить объект узла атрибута по номеру или по наименованию.
Возвращаемое значение:
Узел атрибута
Параметры: 
<НомерАтрибута> - числовое выражение, номер требуемого узла атрибута из списка принадлежащих элементу атрибутов
<НаименованиеАтрибута> - строковое выражение, наименование требуемого узла атрибута из списка принадлежащих элементу атрибутов

Пример:
АтДатыПриема = ЭлСотрудник.ПолучитьУзелАтрибута(''ДатаПриема'');

см. также пример из описания метода КоличествоАтрибутов"},
{"Item","AST","УдалитьАтрибут","removeAttribute","УдалитьАтрибут(<?>)","removeAttribute(<?>)","@Синтаксис:
УдалитьАтрибут(<УзелАтрибута>)
@Назначение
Метод удаляет указанный атрибут из списка принадлежащих данному элементу.
Возвращаемое значение:
нет.
Параметры: 
<УзелАтрибута> - объект узла атрибута, который требуется удалить

Пример:
ЭлСотрудник.УдалитьАтрибут(ЭлСотрудник.ПолучитьУзелАтрибута(''ДатаПриема'')) ;"},
{"Item","AST","ДобавитьАтрибут","addAttribute","ДобавитьАтрибут(<?>)","addAttribute(<?>)","@Синтаксис:
ДобавитьАтрибут(<НаименованиеАтрибута>)
@Назначение
Метод добавляет элементу новый атрибут.
Возвращаемое значение:
Узел атрибута.
Параметры: 
<НаименованиеАтрибута> - строковое выражение, наименование добавляемого атрибута

Пример:
Атр = Документ.ЭлементДокумента.ДобавитьАтрибут(''ДатаСоздания'') ;
Атр.Значение = ТекущаяДата() ;"},
{"Item","AST","УстановитьПространствоИмен","setNamespace","УстановитьПространствоИмен(<?>, )","setNamespace(<?>, )","@Синтаксис:
УстановитьПространствоИмен (<ПространствоИмен>,<Префикс>)
@Назначение
Метод устанавливает соответствие префикса в полных наименованиях элементов и атрибутов некоторому пространству имен для элементов, починенных данному. Если в вызове отсутствует параметр Префикс, то устанавливается пространство имен для элементов и атрибутов без префикса, т.е. пространство имен ''по умолчанию''. Данный метод не может применяться для установки контекста пространства имен для данного элемента, т.е. префикс в имени данного элемента и параметр Префикс не должны совпадать или не должны быть оба пустыми. Контекст пространства имен может быть присвоен элементу только при его создании.
Возвращаемое значение:
нет.
Параметры: 
<ПространствоИмен> - строковое выражение, наименование пространства имен.
<Префикс> - необязательный параметр. Строковое выражение, префикс, ставящийся в соответствие пространству имен

Пример:
Док.ЭлементДокумента.УстановитьПространствоИмен(''urn:schemas-microsoft-com:datatypes'',''dt'');"}}},
{"Folder","AST","КоллекцияСхем","",
{"Folder","AST","Атрибуты","",
{"Item","AST","КоличествоСхем","length","КоличествоСхем","length","@Синтаксис
КоличествоСхем
@Назначение
Число, количество схем в коллекции.

Пример:
Для Сч = 0 По Документ.Схемы.КоличествоСхем-1 Цикл
    ЭлСхемы = Документ.Схемы.ПолучитьСхему(Сч) ;
    . . . . . . .
КонецЦикла ;"}},
{"Folder","AST","Методы","",
{"Item","AST","ДобавитьСхему","add","ДобавитьСхему(<?>,<?>)","add(<?>,<?>)","@Синтаксис:
ДобавитьСхему(<УникальныйИДРесурсаПространстваИмен>, <СпецификаторСхемы>)
@Назначение
Данный метод добавляет новую схему в коллекцию схем, связывая уникальный идентификатор ресурса пространства имен с указанной схемой.
Возвращаемое значение:
нет.
Параметры: 
<УникальныйИДРесурсаПространстваИмен> - строковое выражение, пространство имен
<СпецификаторСхемы> - Строковое выражение или объект документа с загруженной схемой (схема также является XML документом, отвечающим определенным требованиям). Если этот параметр является строкой, то она интерпретируется как путь к файлу, содержащему схему, и схема загружается из указанного файла.

Пример:
КоллекцияСхем.ДобавитьСхему(''http://server/schemas/Sc1.xml'',''C:/Schemas/Sc1.xml'');"},
{"Item","AST","ПолучитьСхему","get","ПолучитьСхему(<?>)","get(<?>)","@Синтаксис:
ПолучитьСхему(<УникальныйИДРесурсаПространстваИмен>)
	или
ПолучитьСхему(<НомерСхемы>)
@Назначение
В соответствии со стандартом документ схемы должен иметь элемент Schema в качестве элемента документа (корневого элемента). Таким образом, данный метод позволяет получить корневой элемент схемы, затребованной по номеру или пространству имен.
Возвращаемое значение:
Узел элемента Schema из документа схемы, связанной с затребованным пространством имен или номером схемы в коллекции.
Параметры: 
<УникальныйИДРесурсаПространстваИмен> - строковое выражение, пространство имен
<НомерСхемы> - числовое выражение, номер схемы в коллекции. Нумерация схем в коллекции начинается с нуля.

Пример:
ЭлСхемы = Документ.Схемы.ПолучитьСхему(''http://server/schemas/Sc1.xml'') ;
См. также пример из описания свойства КоличествоСхем."},
{"Item","AST","УдалитьСхему","remove","УдалитьСхему(<?>)","remove(<?>)","@Синтаксис:
УдалитьСхему(<УникальныйИДРесурсаПространстваИмен>)
@Назначение
Метод удаляет из коллекции схему, связанную с указанным пространством имен.
Возвращаемое значение:
нет.
Параметры: 
<УникальныйИДРесурсаПространстваИмен> - строковое выражение, пространство имен

Пример:
КоллекцияСхем.УдалитьСхему(''http://server/schemas/Sc1.xml'');"},
{"Item","AST","УникальныйИДРесурсаПространстваИмен","namespaceURI","УникальныйИДРесурсаПространстваИмен(<?>)","namespaceURI(<?>)","@Синтаксис:
УникальныйИДРесурсаПространстваИмен(<НомерВКоллекции>)
@Назначение
Метод используется для получения уникальных идентификаторов ресурсов пространств имен, входящих в коллекцию.
Возвращаемое значение:
Строка, содержащая уникальный идентификатор ресурса пространства имен.
Параметры: 
<НомерВКоллекции> - числовое выражение, номер схемы в коллекции. Нумерация схем в коллекции начинается с нуля.

Пример:
Сообщить(Документ.ПространстваИмен.УникальныйИДРесурсаПространстваИмен(0));"}}},
{"Folder","AST","ВыборкаУзлов","",
{"Folder","AST","Атрибуты","",
{"Item","AST","КоличествоУзлов","length","КоличествоУзлов","length","@Синтаксис
КоличествоУзлов
@Назначение
Число, количество узлов, содержащихся в выборке.

Пример:
См. пример из описания метода ПолучитьУзел."}},
{"Folder","AST","Методы","",
{"Item","AST","ПолучитьУзел","item","ПолучитьУзел(<?>)","item(<?>)","@Синтаксис:
ПолучитьУзел(<Номер>)
@Назначение
Метод используется для организации доступа к отдельным узлам документа, вошедшим в выборку.
Возвращаемое значение:
Узел документа (элемент или атрибут).
Параметры: 
<Номер> - числовое выражение, номер узла в выборке. Нумерация узлов в выборке начинается с нуля.

Пример:
Выборка = Документ.ЭлементДокумента.ПолучитьВыборку(''Товар'') ;
Для Сч = 0 По Выборка.КоличествоУзлов-1 Цикл
    ЭлТовар = Выборка.ПолучитьУзел(Сч) ;
    . . . . . . .
КонецЦикла;"}}},
{"Folder","","ПоследовательноСчитываемыйДокумент","",
{"Folder","","Атрибуты","",
{"Item","","СвойстваТекущегоУзла","CurrentNodeProperties","СвойстваТекущегоУзла","","@Синтаксис:
СвойстваТекущегоУзла
@Назначение:
Служит для доступа к различным свойствам текущего узла, зависящим от типа узла, и к атрибутам (если тип узла - элемент)
@Возвращаемое значение:
(OLE-объект)  Предназначен для доступа к свойствам текущего узла, зависящим от типа узла
@Пример:
См. пример к методу Спуститься()"}},
{"Folder","","Методы","",
{"Item","","СвязатьСФайлом","ConnectToFile","СвязатьСФайлом(<?>)","","@Синтаксис:
СвязатьСФайлом(<ПолноеИмяФайла>)
@Назначение:
Устанавливает связь последовательно считываемого документа с XML-файлом
@Параметры:
<ПолноеИмяФайла> - (Строка)  Путь и имя файла"},
{"Item","","СвязатьСоСтрокой","ConnectToString","СвязатьСоСтрокой(<?>)","","@Синтаксис:
СвязатьСоСтрокой(<Стр>)
@Назначение:
Устанавливает связь последовательно считываемого документа со строкой XML-данных
@Параметры:
<Стр> - (Строка)"},
{"Item","","СвязатьСОбъектом","ConnectToObject","СвязатьСОбъектом(<?>)","","@Синтаксис:
СвязатьСОбъектом(<Объект>)
@Назначение:
Устанавливает связь последовательно считываемого документа с XML-объектом
@Параметры:
<Объект> - (XML-узел)"},
{"Item","","Спуститься","ComeDown","Спуститься(<?>)","","@Синтаксис:
Спуститься()
@Назначение:
Перейти на следующий уровень вниз.
@Возвращаемое значение:
(Число)  
1 - начало нового элемента
2 - инструкция обработки
3 - конец уровня
4 - конец документа
@Пример:

Процедура ЗагрузитьДанные()
	
	гXMLАнализатор = СоздатьОбъект(""AddIn.XMLParser"");
	гФайл = гXMLАнализатор.СоздатьПоследовательноСчитываемыйДокумент();
	гФайл.СвязатьСФайлом(ФормИмяФайлаДанных);
	ТипТега = гФайл.Спуститься();
	Пока ТипТега <> 4 Цикл		//	пока не достигнут конец файла
		Если ТипТега <> 1 Тогда
			ТипТега = гФайл.Следующий();
			Продолжить;
		КонецЕсли;				//	пропускаем концы уровней и инструкции
		
		ИмяТега = гФайл.СвойстваТекущегоУзла.Имя;
		
		Если            ИмяТега = ""ОбъектСправочника""		Тогда ЗагрузитьОбъектСправочника();
		ИначеЕсли ИмяТега = ""Документ""			Тогда ЗагрузитьДокумент();
                                //..........................................................
		Иначе
			ТипТега = гФайл.Спуститься();
			Продолжить;
		КонецЕсли;
		   
		ТипТега = гФайл.Следующий();
	КонецЦикла;
	
КонецПроцедуры"},
{"Item","","Подняться","GoUp","Подняться(<?>)","","@Синтаксис:
Подняться()
@Назначение:
Перейти на следующий уровень вверх.
@Возвращаемое значение:
(Число)  
1 - начало нового элемента
2 - инструкция обработки
3 - конец уровня
4 - конец документа
@Пример:
см. пример к методу Спуститься()"},
{"Item","","Следующий","Next","Следующий(<?>)","","@Синтаксис:
Следующий()
@Назначение:
Перейти к следующему объекту на текущем уровне (вложения пропускаются)
@Возвращаемое значение:
(Число)  
1 - начало нового элемента
2 - инструкция обработки
3 - конец уровня
4 - конец документа
@Пример:
см. пример к методу Спуститься()"},
{"Item","","ТекущийЭлементВВидеОбъекта","CurrentElementAsObject","ТекущийЭлементВВидеОбъекта(<?>)","","@Синтаксис:
ТекущийЭлементВВидеОбъекта()
@Назначение:
Доступ к текущему элементу, как к объекту DOM-модели
@Возвращаемое значение:
(XML-узел)  Объект DOM-модели"},
{"Item","","ТекущийЭлементВВидеСтроки","CurrentElementAsString","ТекущийЭлементВВидеСтроки(<?>)","","@Синтаксис:
ТекущийЭлементВВидеСтроки()
@Назначение:
Доступ к текущему элементу, как к строке представления XML-объекта
@Возвращаемое значение:
(Строка)  Представление XML-объекта в виде строки"}},
{"Folder","","СвойстваТекущегоУзла","currentNodeProperties",
{"Folder","","Атрибуты","",
{"Item","","Тип","NodeType","Тип","","@Синтаксис:
Тип
@Возвращаемое значение:
(Число)  1 - это элемент
7 - это инструкция обработки (как в DOM-модели)"},
{"Item","","Уровень","Level","Уровень","","@Синтаксис:
Уровень
@Возвращаемое значение:
(Число)  Текущий уровень вложенности"},
{"Item","","ПолноеИмя","FullName","ПолноеИмя","","@Синтаксис:
ПолноеИмя
@Возвращаемое значение:
(Строка)  имя с префиксом
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Элемент"},
{"Item","","Имя","Name","Имя","","@Синтаксис:
Имя
@Возвращаемое значение:
(Строка)  имя без префикса
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Элемент"},
{"Item","","Префикс","Prefix","Префикс","","@Синтаксис:
Префикс
@Возвращаемое значение:
(Строка)  префикс элемента
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Элемент"},
{"Item","","ПространствоИмен","Namespace","ПространствоИмен","","@Синтаксис:
ПространствоИмен
@Возвращаемое значение:
(Строка)
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Элемент"},
{"Item","","КоличествоАтрибутов","AttributesNumber","КоличествоАтрибутов","","@Синтаксис:
КоличествоАтрибутов
@Возвращаемое значение:
(Число)
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Элемент"},
{"Item","","Приложение","Target","Приложение","","@Синтаксис:
Приложение
@Возвращаемое значение:
(Строка)
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Инструкция обработки"},
{"Item","","Данные","Data","Данные","","@Синтаксис:
Данные
@Возвращаемое значение:
(Строка)
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Инструкция обработки"}},
{"Folder","","Методы","",
{"Item","","НаименованиеАтрибута","AttributeName","НаименованиеАтрибута(<?>)","","@Синтаксис:
НаименованиеАтрибута(<НомерАтрибута>)
@Возвращаемое значение:
(Строка)
@Параметры:
<НомерАтрибута> - (Число)  диапазон: от 0 до КоличествоАтрибутов - 1
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Элемент"},
{"Item","","ПолноеНаименованиеАтрибута","AttributeQName","ПолноеНаименованиеАтрибута(<?>)","","@Синтаксис:
ПолноеНаименованиеАтрибута(<НомерАтрибута>)
@Возвращаемое значение:
(Строка)
@Параметры:
<НомерАтрибута> - (Число)  диапазон: от 0 до КоличествоАтрибутов - 1
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Элемент"},
{"Item","","ПространствоИменАтрибута","AttributeNamespace","ПространствоИменАтрибута(<?>)","","@Синтаксис:
ПространствоИменАтрибута(<НомерАтрибута>)
@Возвращаемое значение:
(Строка)
@Параметры:
<НомерАтрибута> - (Число)  диапазон: от 0 до КоличествоАтрибутов - 1
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Элемент"},
{"Item","","ЗначениеАтрибута","AttributeValue","ЗначениеАтрибута(<?>)","","@Синтаксис:
ЗначениеАтрибута(<НомерАтрибута>)
@Возвращаемое значение:
(Строка)
@Параметры:
<НомерАтрибута> - (Число)  диапазон: от 0 до КоличествоАтрибутов - 1
@Замечание:
Свойство имеет смысл если текущий узел имеет тип - Элемент"}}}},
{"Folder","","ПоследовательноЗаписываемыйДокумент","",
{"Folder","","Атрибуты","",
{"Item","","ИмяФайла","FileName","ИмяФайла","","@Синтаксис:
ИмяФайла
@Назначение:
Имя файла создаваемого документа"},
{"Item","","Содержание","Contens","Содержание","","@Синтаксис:
Содержание
@Назначение:
Не записанная после команды Сбросить() часть документа"},
{"Item","","АтрибутыЭлемента","ElementAttributes","АтрибутыЭлемента","","@Синтаксис:
АтрибутыЭлемента
@Назначение:
Объект для доступа к атрибутам элемента, создаваемого командами ОткрытьЭлемент() и ВключитьЭлемент()"}},
{"Folder","","Методы","",
{"Item","","Очистить","Clear","Очистить(<?>)","","@Синтаксис:
Очистить()
@Назначение:
Очищает содержимое (без записи в файл)"},
{"Item","","Сбросить","Flush","Сбросить(<?>)","","@Синтаксис:
Сбросить()
@Назначение:
Записывает содержимое в выходной файл и очищает память
@Замечание:
Имеет смысл, если установлен атрибут ИмяФайла"},
{"Item","","ОткрытьЭлемет","OpenElement","ОткрытьЭлемет(<?>)","","@Синтаксис:
ОткрытьЭлемет(<ПолноеИмя>,<Значение>)
@Назначение:
Создает открывающий тег, пространство имен берется из текущих установок мапирования
@Параметры:
<ПолноеИмя> - (Строка)  Полное имя тега (с префиксом)
<Значение> - (Строка)  Необязательный параметр.   Значение элемента"},
{"Item","","ЗакрытьЭлемент","CloseElement","ЗакрытьЭлемент(<?>)","","@Синтаксис:
ЗакрытьЭлемент()
@Назначение:
Создает закрывающий тег"},
{"Item","","ВключитьЭлемент","IncludeElement","ВключитьЭлемент(<?>)","","@Синтаксис:
ВключитьЭлемент(<ПолноеИмя>,<Значение>)
@Назначение:
Работает аналогично последовательному вызову ОткрытьЭлемент-ЗакрытьЭлемент.
@Параметры:
<ПолноеИмя> - (Строка)  Полное имя тега (с префиксом)
<Значение> -   Необязательный параметр.   Значение элемента"},
{"Item","","ВключитьЭлемент","IncludeElement","ВключитьЭлемент(<?>)","","@Синтаксис:
ВключитьЭлемент(<DOMобъект>)
@Назначение:
Информация берется из переданного элемента - создается новый тег, возможно, с подчиненными узлами.
@Параметры:
<DOMобъект> - (XML-узел)  Узел, который нужно целиком включить в содержание"},
{"Item","","ВключитьИнструкциюОбработки","IncludeProcessingInstruction","ВключитьИнструкциюОбработки(<?>)","","@Синтаксис:
ВключитьИнструкциюОбработки(<Приложение>,<Данные>)
@Назначение:
Включает узел инструкции обработки
@Параметры:
<Приложение> - (Строка)
<Данные> - (Строка)"},
{"Item","","ОткрытьСвязываниеПрефикса","OpenPrefixMapping","ОткрытьСвязываниеПрефикса(<?>)","","@Синтаксис:
ОткрытьСвязываниеПрефикса(<Префикс>,<ПространствоИмен>)
@Назначение:
Оказывает влияние на пространство имен, в котором будут создаваться элементы и атрибуты, имеющие указанный префикс
@Параметры:
<Префикс> - (Строка)
<ПространствоИмен> - (Строка)"},
{"Item","","ЗакрытьСвязываниеПрефикса","ClosePrefixMapping","ЗакрытьСвязываниеПрефикса(<?>)","","@Синтаксис:
ЗакрытьСвязываниеПрефикса(<Префикс>)
@Назначение:
Заканчивает действие последнего ОткрытьСвязываниеПрефикса() с указанным префиксом. Эта конструкция может быть вложенной, в этом случае продолжается действие ОткрытьСвязываниеПрефикса() с указанным префиксом более вернего уровня
@Параметры:
<Префикс> - (Строка)"}},
{"Folder","","АтрибутыЭлемента","",
{"Folder","","Методы","",
{"Item","","УдалитьВсе","RemoveAll","УдалитьВсе(<?>)","","@Синтаксис:
УдалитьВсе()
@Назначение:
Удаляет все атрибуты текущего элемента"},
{"Item","","Удалить","Remove","Удалить(<?>)","","@Синтаксис:
Удалить(<НомерАтрибута>)
@Назначение:
Удаляет атрибут с указанным zero-based номером
@Параметры:
<НомерАтрибута> - (Число)"},
{"Item","","УстановитьАтрибут","SetAttribute","УстановитьАтрибут(<?>)","","@Синтаксис:
УстановитьАтрибут(<ИмяАтрибута>,<Значение>,<Режим>)
@Назначение:
Устанавливает значение атрибута по имени. Если указанного атрибута не существует - создается новый
@Параметры:
<ИмяАтрибута> - (Строка)
<Значение> - (Строка)
<Режим> - (Число)  Необязательный параметр.   Если 0, то выполняется проверка на пустое значение. Если значение пустое - атрибут не устанавливается."},
{"Item","","НаименованиеАтрибута","AttributeName","НаименованиеАтрибута(<?>)","","@Синтаксис:
НаименованиеАтрибута(<НомерАтрибута>,<Наименование>)
@Назначение:
Устанавливает наименование атрибута по zero-based номеру
@Параметры:
<НомерАтрибута> - (Число)
<Наименование> - (Строка)"},
{"Item","","ПолноеНаименованиеАтрибута","AttributeQName","ПолноеНаименованиеАтрибута(<?>)","","@Синтаксис:
ПолноеНаименованиеАтрибута(<НомерАтрибута>,<ПолноеНаименование>)
@Назначение:
Устанавливает полное наименование (с префиксом) атрибута по zero-based номеру
@Параметры:
<НомерАтрибута> - (Число)
<ПолноеНаименование> - (Строка)"},
{"Item","","ПространствоИменАтрибута","AttributeNameSpace","ПространствоИменАтрибута(<?>)","","@Синтаксис:
ПространствоИменАтрибута(<НомерАтрибута>,<ПространствоИмен>)
@Назначение:
Устанавливает пространство имен атрибута по zero-based номеру
@Параметры:
<НомерАтрибута> - (Число)
<ПространствоИмен> - (Строка)"},
{"Item","","ЗначениеАтрибута","AttributeValue","ЗначениеАтрибута(<?>)","","@Синтаксис:
ЗначениеАтрибута(<НомерАтрибута>,<Значение>)
@Назначение:
Устанавливает значение атрибута по zero-based номеру
@Параметры:
<НомерАтрибута> - (Число)
<Значение> - (Строка)"}}}}},
{"Folder","","Чтение и запись текстовых файлов (объект V7TextFile)","",
{"Folder","","Методы","",
{"Item","AST","ОткрытьФайл","","ОткрытьФайл(<?>,);","OpenFile(<?>,);","@Синтаксис
ОткрытьФайл(<Имя>,<Режим>)
@Назначение
Метод ОткрытьФайл открывает текстовый файл
<Имя> (строковое выражение) - имя файла
<Режим> (число) - 0-чтение (по умолчанию) 1-запись
Чтение
  - только для чтения (допускается только чтение)
Запись
  - открывать на запись эксклюзивно
  - при открытии если файла нет - создавать, если есть очищать

Метод доступен для объекта типа V7TextFile"},
{"Item","AST","ЗакрытьФайл","","ЗакрытьФайл();","CloseFile();","@Синтаксис
ЗакрытьФайл()
@Назначение
Метод ЗакрытьФайл закрывает текстовый файл

Метод доступен для объекта типа V7TextFile"},
{"Item","AST","ЗаписатьСтроку","","ЗаписатьСтроку(<?>);","WriteLine(<?>);","@Синтаксис
ЗаписатьСтроку(<Строка>)
@Назначение
Метод ЗаписатьСтроку записывает строку <Строка> в конец файла
Метод добавляет разделитель строки в конце, если в строке есть разделители, то они тоже записываются. 

Метод доступен для объекта типа V7TextFile"},
{"Item","AST","ПрочитатьСтроку","","ПрочитатьСтроку(<?>);","ReadLine(<?>);","@Синтаксис
ПрочитатьСтроку(<Строка>)
@Назначение
Метод ПрочитатьСтроку считывает очередную строку и возвращает ее в параметр <Строка> без разделителя строк.
Если в файле символ EndOfFile, метод ПрочитатьСтроку  обрабатывать его также как объект Текст. 
Возвращаемое значение:
 1 - строка считана;  0 - больше строк нет

Метод доступен для объекта типа V7TextFile"},
{"Item","","ВыбратьСтроки","","ВыбратьСтроки();","SelectLines();","@Синтаксис
ВыбратьСтроки()
@Назначение
Метод ВыбратьСтроки инициирует считывание с начала файла

Метод доступен для объекта типа V7TextFile"},
{"Item","","РазмерБуфера","","РазмерБуфера(<?>);","BufferSize(<?>);","@Синтаксис
РазмерБуфера(<Размер>)
@Назначение
Метод РазмерБуфера устанавливает размер внутреннего буфера
<Размер> - размер внутреннего буфера
Возвращаемое значение:
    если параметр не задан, возвращает текущее значение размера внутреннего буфера.

Метод доступен для объекта типа V7TextFile"},
{"Item","","КодоваяСтраница","","КодоваяСтраница(<?>);","CodePage(<?>);","@Синтаксис
КодоваяСтраница(<Страница>)
@Назначение
Метод КодоваяСтраница устанавливает кодовую страницу
<Страница> -  страница: 0 - Windows-кодировка;
1 - DOS-кодировка
Возвращаемое значение:
     если параметр не задан, возвращает текущее значение кодовой страницы;
     если параметр задан, возвращает прежнее значение кодовой страницы;

Метод доступен для объекта типа V7TextFile"}}}}}